# While the comments in here try to be helpful, the most up-to-date
# documentation for these options can always be found on the web at:
#
# 'http://dev.bukkit.org/server-mods/homespawnplus/pages/config-params'

# If you're having problems with other plugins that have registered
# commands that you want to use with HSP (for example, CommandBook has
# /home, /spawn and loads first alphabetically), you can uncomment the
# below lines and HSP will then take over those commands for it's own
# use when it loads.
#usurpCommands:
#  - home
#  - sethome
#  - spawn
#  - setspawn

# This defines which permission system HSP uses. Vault and WEPIF
# (WEPIF is built into WorldEdit) are preferred, they both provide
# a nice interface to all other permission systems. If you don't have
# or don't want to use either of those, there is some native support
# for a few other permission systems that you can use. These are
# checked in the order they are listed for existence, and the
# first one to match is used.
permissions:
  - vault
  - wepif
  - pex
  - perm2-compat
  - superperms
  - ops

core:
  # 0 - Ebeans storage (will go to SqlLite or MySQL, as defined
  #     by bukkit.yml)
  # 1 - Cached Ebeans - currently disabled, don't use
  storage: 0

  # this is ONLY used when "ops" is used in the "permissions" section
  # above.
  # In that case, any permissions listed here are given to everyone by
  # default (ops always have full permissions)
#  defaultPermissions:
#    - hsp.command.home.use 
#    - hsp.command.sethome.use 

  # set to true to enable players setting their homes by clicking beds.
  # they must also have the 'hsp.home.bedsethome' permission.
  bedsethome: true
 
  # The default/main world. Strategies reference this as the default
  # world, you can change that here if you like.
  defaultWorld: world

  # set to true if you want plugin to change the spawn of the actual map
  # (ie. even if you turn this plugin off later, whatever default spawn
  # you set in various worlds will stay)
  override_world: true

  # if recordLastLogout is true, HSP will record the precise location
  # location the player logged out at and respawn them there, instead
  # of just letting Bukkit do it. This is an attempt to work around a
  # bug where people logout close to a wall and Bukkit tries to respawn
  # them in the wall
  recordLastLogout: false

  # set to true to have a bit more verbose logging in your server.log
  # about what HomeSpawnPlus is doing
  verboseLogging: false
  # set to true to have verbose logging in your server.log as
  # strategies are being evaluated - great for debugging and testing
  # your strategies when you first set them up.
  verboseStrategyLogging: false

  # Event priority; the basic assumption is that you want HSP to
  # be the final say in your onjoin/respawn event chains - if you
  # didn't want that you probably wouldn't be running HSP in the
  # first place. But you can change it here if you want to
  # for some reason.
  eventPriority: highest

  # HSP has a notion of "default home" which the player can change
  # by using /setdefaulthome. In the event that the player has
  # deleted their defaultHome and only one home is remaining on
  # a given world, this flag says to count that last home as the
  # "default" home, even if it wasn't specifically flagged as
  # the default.
  lastHomeIsDefault: true

# Web doc reference for event strategies:
# http://dev.bukkit.org/server-mods/homespawnplus/pages/strategy-doc/
#
events:
  # strategies to use when player is joining the game
  onJoin:
    - spawnNewPlayer
    - default
 
  # strategies to use when player is respawning after a death
  onDeath:
    - homeMultiWorld
    - spawnLocalWorld

  # strategies to use when player types "/spawn"
  onSpawnCommand:
    - spawnLocalWorld
    - spawnDefaultWorld

  # strategies to use when player types "/groupspawn"
  onGroupSpawnCommand:
    - spawnGroup

  # strategies to use when player types "/home"
  onHomeCommand:
    - homeMultiWorld

  # strategies to use when player types "/home name"
  onNamedHomeCommand:
    - homeNamedHome

#  example of world-specific strategy
#  world:
#    myworld:
#      onDeath:
#        - homeLocalWorld
#        - spawnLocalWorld
#      onHomeCommand:
#        - homeLocalWorld
#
#  example of permission-specific strategy
#  permission:
#    entry1:
#      permissions:
#        - my.special.permission
#      onJoin:
#        - homeSpecificWorld:specialworld
#        - spawnSpecificWorld:specialworld
#      onDeath:
#        - homeMultiWorld
#        - homeAnyWorld

# you can globally disable individual commands here, if needed
disabledCommands:
  home: false
  sethome: false
  spawn: false
  setspawn: false
  groupspawn: false
  setgroupspawn: false

# cooldowns for various commands can be defined here
cooldown:
  # if set to true, each home will have a unique cooldown.
  # so typing "/home home1" will start home1's cooldown,
  # and "/home home2" is on a separate cooldown.
  cooldownPerHome: false
  home: 60
  spawn: 60
  groupspawn: 60

#  example of world-specific cooldowns
#  world:
#    myworld:
#      home: 120
#      spawn: 120
#
#  example of permission-specific cooldowns
#  permission:
#    entry1:
#      permissions:
#        - my.special.permission
#      home: 30
#      spawn: 30

warmup:
  # globally enable or disable warmups.
  enabled: false
 
  # set to true if movement should cancel a warmup
  onMoveCancel: false

  # set to true if receiving damage should cancel a warmup
  onDamageCancel: false

  # individual command warmup timers
  home: 5
  spawn: 5
  groupspawn: 5

# ability to raise or lower the limit of homes you allow
# players to have. Can be defined on a per-world or
# per-permission basis. (-1 = unlimited)
homeLimits:
  # If singleGlobalHome is set, all other sections are ignored
  # and a single global home is enforced. This means typing
  # /sethome on any world will always work and it will always
  # overwrite whatever other home you had set. This can be
  # overridden by the permission "hsp.singleGlobalHomeExempt",
  # in which case the limits defined below still apply.
  singleGlobalHome: false

  default:
    perWorld: 1
    global: -1

#  world:
#    myworld:
#      perWorld: 5
#  permission:
#    limit1:
#      permissions:
#        - my.custom.perm
#        - group.mygroup
#      perWorld: 3
#      global: 10

# If you have Vault installed, HSP can use that to charge prices for
# commands using whatever economy plugin you happen to have installed.
# Costs will not work if you do not have Vault installed.
#
# http://dev.bukkit.org/server-mods/vault/
cost:
  # if verbose is true, the player will get a message stating that their
  # account has been charged whenever they use a command with a cost.
  verbose: true
  home: 0
  sethome: 0
  spawn: 0
  groupspawn: 0
